rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
      //ユーザーがログインしているかを検証
      function isAuthenticated() {
            return request.auth != null;
      }
      //ユーザーがログインしていること & 書き込まれるデータのuidプロパティが格納されるuidと一緒かどうか & ログインユーザーが書き込むuidと同じか
      function isUserAuthenticated(uid) {
            return isAuthenticated() && isUidOfDataSameToDocUid(uid) && isLoginUidSameToDocUid(uid);
      }
      //ログインユーザーがdocのuidと同じか
      function isLoginUidSameToDocUid(uid) {
            return uid == request.auth.uid;
      }
      //ログインしているユーザーのuidと送られてきたデータのuidが一致しているか確認する
      function isUidOfDataSameToLoginUid() {
        return request.auth.uid == request.resource.data.uid;
      }
      //書き込まれるデータのuidプロパティがdocのuidと一緒かどうか
      function isUidOfDataSameToDocUid(uid) {
        return uid == request.resource.data.uid;
      }
      
      match /users/{uid} {
          allow read: if isAuthenticated();
          allow create, update: if isUserAuthenticated(uid);
          match /followings/{followingUid} {
            allow read: if isAuthenticated();
            allow create: if isUserAuthenticated(uid);
            allow delete: if isLoginUidSameToDocUid(uid) && isAuthenticated();
          }

          match /favoriteArtists/{artistId} {
            allow read: if isAuthenticated();
            allow create, delete: if isLoginUidSameToDocUid(uid) && isAuthenticated();
          }
          
          match /posts/{postId} {
            allow read: if isAuthenticated();
            allow create: if isUserAuthenticated(uid);
            allow delete: if isLoginUidSameToDocUid(uid) && isAuthenticated();

            match /postlikes/{uid} {
              allow read: if isAuthenticated();
              allow create: if isUserAuthenticated(uid);
              allow delete: if isLoginUidSameToDocUid(uid) && isAuthenticated();
            }

            // match /postAnswers/{replyUid} {
            //   allow read: if isAuthenticated();
            // }
          }
      }
      
      // match /users/{friendUid}/followers/{myUid} {
      //   allow read: if isAuthenticated();
      //   allow create: if isAuthenticated() && isLoginUidSameToDocUid(myUid) && isUidOfDataSameToDocUid(myUid) && friendUid == request.resource.data.followedUid;
      //   allow delete: if isAuthenticated() && isLoginUidSameToDocUid(myUid);
      // }

      match /users/{friendUid} {

        match /followers/{myUid} {
          allow read: if isAuthenticated();
          allow create: if isAuthenticated() && isLoginUidSameToDocUid(myUid) && isUidOfDataSameToDocUid(myUid) && friendUid == request.resource.data.followedUid;
          allow delete: if isAuthenticated() && isLoginUidSameToDocUid(myUid);
        }

        // match /posts/{postId} {
          
        //   match /postAnswers/{myUid} {
        //     allow read: if isAuthenticated();
        //     //どんなことをしたいか？
        //     allow create: if isAuthenticated() && isLoginUidSameToDocUid(myUid) && myUid == request.resource.data.replyUid && friendUid == request.resource.data.posterUid; 
        //   }
        // }
      }

      // match /{path=**}/postAnswers/{myUid} {
      //   allow read: if isAuthenticated();
      //   //allow create: if isAuthenticated() && isLoginUidSameToDocUid(myUid) && myUid == request.resource.data.replyUid;
      //   // 本当はここに上のを追加したかった && friendUid == request.resource.data.posterUid; 
      // }

      match /communities/{communityId}/users/{uid} {
        allow read: if isAuthenticated();
        allow create, update: if isUserAuthenticated(uid);
        allow delete: if isLoginUidSameToDocUid(uid) && isAuthenticated();
      }

  }
}